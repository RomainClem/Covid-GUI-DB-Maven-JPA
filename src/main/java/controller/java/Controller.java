package controller.java;

import model.java.*;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.List;


/**
 * Class Controller
 * This is the Controller that will contact the database and send information to the view
 * This will be the point of contact between the DAOs
 * @author Name: Romain Clemencon, Student Number: R00193006, Group: SDH2C
 */
public class Controller {
    //region Person

    /**
     * Add a Person to the database
     * A Person will be created using the personInfo, a Name will also be added to the database with
     * JPA Hibernate OnetoOne relationship
     * @param personInfo List of Objects (String and int), each carrying the attributes for a Person object
     * @return false if a person is already in the database with that ID / true if successful
     */
    public boolean addPerson(List<Object> personInfo){
       // Checking if the Person is in the database
       PersonDao personDao = new PersonDao();
       if (personDao.get((Integer) personInfo.get(3)) != null) return false;

       // It's not in the database proceed
       Name name = new Name((Integer) personInfo.get(3), (String) personInfo.get(0),(String) personInfo.get(1),(String) personInfo.get(2));
       Person person = new Person(name, (String) personInfo.get(4), (String) personInfo.get(5), (Integer) personInfo.get(3));

       name.setPerson(person);
       personDao.save(person);

       return true;
    }

    /**
     * Load all the Persons from the database onto a list
     * @return a List of Person (all the person in the db)
     */
    public List<Person> loadPerson(){
       PersonDao personDao = new PersonDao();
       return personDao.getAll();
    }

    /**
     * Update a Person in the database
     * @param personInfo List of Objects (String and int), each carrying the attributes for a Person object
     * Like in addPerson, we create a new Person object. Then we update the whole object instead of checking what was modified.
     */
    public void updatePerson(List<Object> personInfo){
       Name name = new Name((Integer) personInfo.get(3), (String) personInfo.get(0),(String) personInfo.get(1),(String) personInfo.get(2));
       Person person = new Person(name, (String) personInfo.get(4), (String) personInfo.get(5), (Integer) personInfo.get(3));

       PersonDao personDao = new PersonDao();
       NameDao nameDao = new NameDao();
       personDao.update(person);
       nameDao.update(name);
    }

    /**
     * Delete a Person by ID
     * This is very simple, the person will be found in the database using the ID then will be removed.
     * @param id ID (int) of a Person
     */
    public void deletePerson(int id){
       PersonDao personDao = new PersonDao();
       personDao.delete(id);
    }

    /**
     * Find and retrieve a Person by ID
     * The Person will be retrieved by their Unique ID, then returned.
     * @param id ID of a Person to find in the database
     * @return the Person whom ID was passed as parameter
     */
    public Person findPerson(int id) {
       PersonDao personDao = new PersonDao();
       return personDao.get(id);
    }
    //endregion

    //region Contact

    /**
     * Add a Contact by contact object
     * Here we directly supply a Contact object carrying two person ID and a date and time.
     * The contact unique ID is automatically generated by the SQL database as it is setup with AUTO_INCREMENT.
     * @param contact Contact object passed as parameter
     */
    public void addContact(Contact contact){
        ContactDao contactDao = new ContactDao();
        contactDao.save(contact);
    }

    /**
     * Load all the Contacts from the database onto a list
     * Exactly similar to the Load Person method.
     * @return List of Contact, with all the Contacts in the database
     */
    public List<Contact> loadContact(){
        ContactDao contactDao = new ContactDao();
        return contactDao.getAll();
    }

    /**
     * Delete a Contact from the database
     * User don't have a direct access to the Unique ID of a Contact generated by the database. But, by clicking
     * on the table with Contacts. The unique ID will be retrieved from the row and passed into this method. Allowing
     * a user to delete a Contact.
     * @param id Unique identifier of the Contact
     */
    public void deleteContact(int id){
        ContactDao contactDao = new ContactDao();
        contactDao.delete(id);
    }
    //endregion

    /**
     * Save the Name, Person and Contact table to their own serialized file
     * This method call the three DAOs to load the Objects into Lists and Serialize those lists into a file.
     */
    public void save(){
        String[] fileNames = {"contact.ser", "name.ser", "person.ser"};

        for (String s: fileNames) {
            try {
                //Using FileWriter to create a new file with the same name
                FileOutputStream fos = new FileOutputStream("src/serializedFiles/" + s);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                switch (s) {
                    case "contact.ser" -> {
                        ContactDao contactDao = new ContactDao();
                        oos.writeObject(contactDao.getAll());
                    }
                    case "name.ser" -> {
                        NameDao nameDao = new NameDao();
                        oos.writeObject(nameDao.getAll());
                    }
                    case "person.ser" -> {
                        PersonDao personDao = new PersonDao();
                        oos.writeObject(personDao.getAll());
                    }
                }
                fos.close();
                oos.close();
            } catch (Exception e) {
                System.out.println("Class : "+s+" , Save() Serialization error :" + e);
            }
        }

    }
}
